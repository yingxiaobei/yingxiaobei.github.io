<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>颖小贝</title>
  
  <subtitle>ying Wang</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-28T10:47:07.260Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ying Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>防抖和节流</title>
    <link href="http://example.com/2021/10/27/JavaScript/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>http://example.com/2021/10/27/JavaScript/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2021-10-27T03:03:47.000Z</published>
    <updated>2021-10-28T10:47:07.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景（解决了什么问题？）"><a href="#背景（解决了什么问题？）" class="headerlink" title="背景（解决了什么问题？）"></a>背景（解决了什么问题？）</h2><p>防抖的原理是什么？<br>网上流传的例子非常形象：当我们在乘电梯时，如果这时有人过来，我们会出于礼貌一直按着开门按钮等待，等到这人进电梯了，刚准备关门时，发现又有人过来了！我们又要重复之前的操作，如果电梯空间无限大的话，我们就要一直等待了。。。当然人的耐心是有限的！所以我们规定了一个时间，比如10秒，如果10秒都没人来的话，就关电梯门。<br>​</p><p>窗口的resize、scroll、输入框内容校验等操作时，如果这些操作处理函数是较为复杂或页面频繁重渲染等操作时，在这种情况下如果事件触发的频率无限制，会加重浏览器的负担，导致用户体验非常糟糕。有些时候，我们并不能或者不想频繁触发事件。此时为了限制这种短时间内高频触发函数调用情况发生，我们可以借助debounce（防抖）和throttle（节流）。<br>​</p><p>如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=<span class="string">&quot;unDebounce&quot;</span> /&gt;</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line"><span class="comment">//模拟一段ajax请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;ajax request &#x27;</span> + content)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inputa = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;unDebounce&#x27;</span>)</span><br><span class="line"></span><br><span class="line">inputa.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    ajax(e.target.value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以看到，我们只要按下键盘，就会触发这次ajax请求。不仅从资源上来说是很浪费的行为，而且实际应用中，用户也是输出完整的字符后，才会请求。<br>​</p><p>先用<a href="https://cdn.bootcss.com/underscore.js/1.9.1/underscore.js">underscore.js</a>中的_debounce函数防抖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=<span class="string">&quot;debounce&quot;</span> /&gt;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//模拟一段ajax请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;ajax request &#x27;</span> + content)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inputb = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;debounce&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> debounceAjax = _debounce(ajax, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">inputb.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        debounceAjax(e.target.value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="函数防抖-debounce"><a href="#函数防抖-debounce" class="headerlink" title="函数防抖(debounce)"></a>函数防抖(debounce)</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>防抖是指在一定的时间内再次触发此事件,会清空上次的事件重新开始,如果制定的时间内没有再次触发,那么这个事件才会执行。<br>​</p><h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><h4 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h4><p>主要注意两个问题，①this指向 ②参数传递</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">      </span><br><span class="line">       <span class="comment">// 改变执行函数内部的this指向</span></span><br><span class="line">        <span class="keyword">let</span> context = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            func.apply(context, args);</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>func是要进行防抖的函数，wait是设定的延时，debounce返回一个匿名函数，形成闭包，内部维护了一个私有变量timeout。我们一直会触发的是这个返回的匿名函数，定时器会返回一个Id值赋给timeout，如果在delay时间间隔内，匿名函数再次被触发，定时器都会被清除，然后重新开始计时。<br>​</p><h4 id="提供立即执行选项"><a href="#提供立即执行选项" class="headerlink" title="提供立即执行选项"></a>提供立即执行选项</h4><p>上面代码相对比较健壮，完成了主要功能，但是呢，上面简单又有点bug，那就是我们点击第一次也要等很久的定时器时间间隔才可以看到效果，而我们有时会希望的是点击了马上就有效果。<br>下面看看<a href="https://cdn.bootcss.com/underscore.js/1.9.1/underscore.js">underscore.js</a>对 debounce（防抖）的封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func,wait,immediate</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> timeout;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        <span class="keyword">if</span>(immediate)&#123;</span><br><span class="line">          <span class="comment">// 第一次点击的话timeout就是undefined取反就是true，就会执行下一行，第二次点击的话就                 timeout不为空就不会按照原来的逻辑执行了。这样也就达到了点击第一次立即执行的效果。</span></span><br><span class="line">          <span class="keyword">let</span> callNow = !timeout;  </span><br><span class="line">          <span class="comment">// 立即执行</span></span><br><span class="line">          <span class="keyword">if</span>(callNow) func.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          func.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">          timeout = <span class="literal">null</span>;</span><br><span class="line">        &#125;, wait);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然在<a href="https://cdn.bootcss.com/underscore.js/1.9.1/underscore.js">underscore.js</a>库中还提供一个取消的方法，和防抖函数的返回值<br>参考<a href="https://cdn.bootcss.com/underscore.js/1.9.1/underscore.js">underscore.js</a>源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * underscore 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;function&#125;</span> </span>func        回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;number&#125;</span>   </span>wait        表示时间窗口的间隔</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;boolean&#125;</span>  </span>immediate   设置为ture时，是否立即调用函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;function&#125;</span>             </span>返回客户调用函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">_.debounce = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout, args, context, timestamp, result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 现在和上一次时间戳比较</span></span><br><span class="line">      <span class="keyword">var</span> last = _.now() - timestamp;</span><br><span class="line">      <span class="comment">// 如果当前间隔时间少于设定时间且大于0就重新设置定时器</span></span><br><span class="line">      <span class="keyword">if</span> (last &lt; wait &amp;&amp; last &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(later, wait - last);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则的话就是时间到了执行回调函数</span></span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">          result = func.apply(context, args);</span><br><span class="line">          <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      context = <span class="built_in">this</span>;</span><br><span class="line">      args = <span class="built_in">arguments</span>;</span><br><span class="line">      <span class="comment">// 获得时间戳</span></span><br><span class="line">      timestamp = _.now();</span><br><span class="line">      <span class="comment">// 如果定时器不存在且立即执行函数</span></span><br><span class="line">      <span class="keyword">var</span> callNow = immediate &amp;&amp; !timeout;</span><br><span class="line">      <span class="comment">// 如果定时器不存在就创建一个</span></span><br><span class="line">      <span class="keyword">if</span> (!timeout) timeout = <span class="built_in">setTimeout</span>(later, wait);</span><br><span class="line">      <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">        <span class="comment">// 如果需要立即执行函数的话 通过 apply 执行</span></span><br><span class="line">        result = func.apply(context, args);</span><br><span class="line">        context = args = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​</p><p>​</p><h3 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3.使用场景"></a>3.使用场景</h3><p>1.搜索输入查询，用户在不断输入值时，用防抖来节约请求资源。<br>如：当给输入框做模糊匹配，监听input事件，取到输入值就直接去调接口。当接口的数据量非常大，这种方式调用接口的频率太高，而且用户输入时调用根本没有必要，只要在用户停止输入的那一刻切调接口就行了。</p><p>2.调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多。<br>如：大家一定见过那种左右两边中间放广告位的网站，在网页滚动时，广告位要保持在屏幕中间，就要不断地去计算位置，如果不做限制，在视觉上广告位就像在“抖”。</p><p>3.文本输入的验证<br>如：文本编辑器实时保存，当无任何更改操作一秒后进行保存。<br>​</p><p>4.表单验证<br>如：手机号、邮箱输入检测<br>​</p><p>3.给按钮加函数防抖防止表单多次提交<br>如：登录、发短信等按钮提交事件，避免用户点击太快，以致于发送了多次请求。<br>但是这个实际开发中，更倾向于加一个loading状态</p><p>补充：<br>在实际业务场景使用中，我们更多的会选择成熟的第三方库来达到防抖和节流的效果。目前常用的有** **<a href="https://www.lodashjs.com/docs/lodash.debounce"><strong>Lodash</strong></a><strong>和</strong><a href="https://cdn.bootcss.com/underscore.js/1.9.1/underscore.js"><strong>Underscore.js</strong> </a></p><p>​</p><h2 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流(throttle)"></a>节流(throttle)</h2><h3 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a>1.定义</h3><p>节流：如果你持续触发事件，每隔一段时间，只执行一次事件<br>​</p><h3 id="2-代码实现-1"><a href="#2-代码实现-1" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><p>时间戳版本：在持续触发事件的过程中，函数会立即执行，并且每 1s 执行一次。<br><img src="https://cdn.nlark.com/yuque/0/2021/webp/1917579/1635390313920-b51686c9-6d9d-461b-a864-0b17dbb207ec.webp#clientId=u3389ae12-e745-4&from=paste&id=u53e9d718&margin=%5Bobject%20Object%5D&originHeight=323&originWidth=717&originalType=url&ratio=1&status=done&style=none&taskId=u4fb2b4e0-c281-4b6c-843d-9bbe5674eb8"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> context, args;</span><br><span class="line">  <span class="keyword">let</span> pre = <span class="number">0</span>; <span class="comment">// 之前的时间戳</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    context = <span class="built_in">this</span>;</span><br><span class="line">    args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">if</span> (now - pre &gt;= wait) &#123;</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">      pre = now;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​</p><p>定时器版本：在持续触发事件的过程中，函数不会立即执行，并且每 1s 执行一次，在停止触发事件后，函数还会再执行一次。<br><img src="https://cdn.nlark.com/yuque/0/2021/webp/1917579/1635390329675-191ab07a-3454-46e7-80ee-65070b57c43e.webp#clientId=u3389ae12-e745-4&from=paste&id=ua2a7e9b5&margin=%5Bobject%20Object%5D&originHeight=323&originWidth=717&originalType=url&ratio=1&status=done&style=none&taskId=uf4eed6f6-bbbf-4709-ad21-1c16cd9ad0a"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> context, args, timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    context = <span class="built_in">this</span>;</span><br><span class="line">    args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><p>合并版本：其实时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。<br>参考underscore源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * underscore 节流函数，返回函数连续调用时，func 执行频率限定为 次 / wait</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;function&#125;</span>   </span>func      回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;number&#125;</span>     </span>wait      表示时间窗口的间隔</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;object&#125;</span>     </span>options   如果想忽略开始函数的的调用，传入&#123;leading: false&#125;。</span></span><br><span class="line"><span class="comment"> *                                如果想忽略结尾函数的调用，传入&#123;trailing: false&#125;</span></span><br><span class="line"><span class="comment"> *                                两者不能共存，否则函数不能执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;function&#125;</span>             </span>返回客户调用函数   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">_.throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context, args, result;</span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 之前的时间戳</span></span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果 options 没传则设为空对象</span></span><br><span class="line">    <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 定时器回调函数</span></span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 如果设置了 leading，就将 previous 设为 0</span></span><br><span class="line">      <span class="comment">// 用于下面函数的第一个 if 判断</span></span><br><span class="line">      previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : _.now();</span><br><span class="line">      <span class="comment">// 置空一是为了防止内存泄漏，二是为了下面的定时器判断</span></span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">      result = func.apply(context, args);</span><br><span class="line">      <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获得当前时间戳</span></span><br><span class="line">      <span class="keyword">var</span> now = _.now();</span><br><span class="line">      <span class="comment">// 首次进入前者肯定为 true</span></span><br><span class="line">  <span class="comment">// 如果需要第一次不执行函数</span></span><br><span class="line">  <span class="comment">// 就将上次时间戳设为当前的</span></span><br><span class="line">      <span class="comment">// 这样在接下来计算 remaining 的值时会大于0</span></span><br><span class="line">      <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span><br><span class="line">      <span class="comment">// 计算剩余时间</span></span><br><span class="line">      <span class="keyword">var</span> remaining = wait - (now - previous);</span><br><span class="line">      context = <span class="built_in">this</span>;</span><br><span class="line">      args = <span class="built_in">arguments</span>;</span><br><span class="line">      <span class="comment">// 如果当前调用已经大于上次调用时间 + wait</span></span><br><span class="line">      <span class="comment">// 或者用户手动调了时间</span></span><br><span class="line">   <span class="comment">// 如果设置了 trailing，只会进入这个条件</span></span><br><span class="line">  <span class="comment">// 如果没有设置 leading，那么第一次会进入这个条件</span></span><br><span class="line">  <span class="comment">// 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了</span></span><br><span class="line">  <span class="comment">// 其实还是会进入的，因为定时器的延时</span></span><br><span class="line">  <span class="comment">// 并不是准确的时间，很可能你设置了2秒</span></span><br><span class="line">  <span class="comment">// 但是他需要2.2秒才触发，这时候就会进入这个条件</span></span><br><span class="line">      <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">        <span class="comment">// 如果存在定时器就清理掉否则会调用二次回调</span></span><br><span class="line">        <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">          <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">          timeout = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        previous = now;</span><br><span class="line">        result = func.apply(context, args);</span><br><span class="line">        <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断是否设置了定时器和 trailing</span></span><br><span class="line">    <span class="comment">// 没有的话就开启一个定时器</span></span><br><span class="line">        <span class="comment">// 并且不能不能同时设置 leading 和 trailing</span></span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(later, remaining);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="3-使用场景-1"><a href="#3-使用场景-1" class="headerlink" title="3.使用场景"></a>3.使用场景</h3><p>scroll 事件，每隔一秒计算一次位置信息等。<br>浏览器播放事件，每个一秒计算一次进度信息等。<br>input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求 (也可做防抖)</p><h2 id="两者比较"><a href="#两者比较" class="headerlink" title="两者比较"></a>两者比较</h2><p>相同点：</p><ul><li>其实本质上都是为了节省程序的性能（防止高频函数调用），能有效减少浏览器引擎的损耗，防止出现页面堵塞卡顿现象</li><li>借助了闭包的特性来缓存变量（状态）</li></ul><p>区别：</p><ul><li>侧重点不同，防抖侧重于稳定只能执行一次，而节流强调限周期内次数，即执行频率，不限制所有时间内的总次数</li></ul><p>​</p><p>​</p><p>这里的使用场景只是针对用户量特别大或者请求特别耗性能的情况，如果服务器的压力允许的话，使用节流在适当的间隔时间给用户一定的反馈，其实用户体验会更好一些。<br>​</p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景（解决了什么问题？）&quot;&gt;&lt;a href=&quot;#背景（解决了什么问题？）&quot; class=&quot;headerlink&quot; title=&quot;背景（解决了什么问题？）&quot;&gt;&lt;/a&gt;背景（解决了什么问题？）&lt;/h2&gt;&lt;p&gt;防抖的原理是什么？&lt;br&gt;网上流传的例子非常形象：当我们在乘</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>this</title>
    <link href="http://example.com/2021/10/26/JavaScript/this/"/>
    <id>http://example.com/2021/10/26/JavaScript/this/</id>
    <published>2021-10-26T03:03:47.000Z</published>
    <updated>2021-10-28T10:46:47.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是this"><a href="#什么是this" class="headerlink" title="什么是this"></a>什么是this</h2><p>this 是JavaScript中的一个关键词，在JavaScript中，this不是固定不变的，在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。<br><strong>this是一个指针，指向调用函数的那个对象。</strong><br><strong>​</strong></p><h2 id="为什么要用this"><a href="#为什么要用this" class="headerlink" title="为什么要用this"></a>为什么要用this</h2><p>回答这个问题我们就先看看如果不使用this会出现什么问题。试想下面代码如果不使用this应该怎么写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function speak()&#123;</span><br><span class="line">    var name = this.name</span><br><span class="line">    console.log(`Hello I am $&#123;name&#125;`)</span><br><span class="line">&#125;</span><br><span class="line">var me = &#123;</span><br><span class="line">    name: &#x27;a&#x27;,</span><br><span class="line">    speak: speak</span><br><span class="line">&#125;</span><br><span class="line">var you = &#123;</span><br><span class="line">    name: &#x27;b&#x27;,</span><br><span class="line">    speak: speak</span><br><span class="line">&#125;</span><br><span class="line">me.speak()  //Hello I am a</span><br><span class="line">you.speak()  //Hello I am b</span><br></pre></td></tr></table></figure><p>this可以在同一个执行环境中使用不同的上下文对象。它其实提供了一种更加优雅的方式来隐式“传递”一个对象引用，因此可以使API设计的更加简洁且易于复用。<br>this使用频率很高，如果我们不懂this，那么在看别人的代码或者是源码的时候，就会很吃力。<br><strong>一定程度上减少代码量，提高代码整洁性和可读性</strong></p><h2 id="绑定规则"><a href="#绑定规则" class="headerlink" title="绑定规则"></a>绑定规则</h2><ul><li>在浏览器里，在全局范围内this 指向window对象；</li><li>在函数中，this永远指向最后调用他的那个对象；</li><li>构造函数中，this指向new出来的那个新的对象；</li><li>call、apply、bind中的this被强绑定在指定的那个对象上；</li><li>箭头函数中this比较特殊,箭头函数this为父作用域的this，不是调用时的this.要知道前四种方式,都是调用时确定,也就是动态的,而箭头函数的this指向是静态的,声明的时候就确定了下来；</li><li>apply、call、bind都是js给函数内置的一些API，调用他们可以为函数指定this的执行,同时也可以传参。</li></ul><p>​</p><h2 id="绑定类型"><a href="#绑定类型" class="headerlink" title="绑定类型"></a>绑定类型</h2><p><a href="https://juejin.cn/post/6844903805587619854#heading-11">https://juejin.cn/post/6844903805587619854#heading-11</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是this&quot;&gt;&lt;a href=&quot;#什么是this&quot; class=&quot;headerlink&quot; title=&quot;什么是this&quot;&gt;&lt;/a&gt;什么是this&lt;/h2&gt;&lt;p&gt;this 是JavaScript中的一个关键词，在JavaScript中，this不是固定不变的，在</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>作用域及作用域链</title>
    <link href="http://example.com/2021/10/24/JavaScript/%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%8A%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <id>http://example.com/2021/10/24/JavaScript/%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%8A%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</id>
    <published>2021-10-24T03:03:47.000Z</published>
    <updated>2021-10-28T10:46:17.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是作用域？"><a href="#什么是作用域？" class="headerlink" title="什么是作用域？"></a>什么是作用域？</h2><p><strong>定义：</strong><br>变量可访问某一变量的区域（范围）</p><p><strong>作用：</strong><br>隔离变量，不会造成变量污染问题，在不同的作用域下，相同的变量命名不会冲突</p><p>​</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>1）在全局作用域声明的变量是全局变量，全局变量可以在任何地方使用<br>2）因为全局变量可以任何地方使用，所以要特别关注局部变量<br>3）全局作用域在页面打开时创建，在页面关闭时销毁<br><strong>​</strong></p><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>（也叫函数作用域）<br>1）函数在执行的时候会在内存中开辟新空间<br>2）当执行完毕函数之后，会关闭作用域空间(变量被销毁)<br>注意：形参也是局部变量<br><strong>​</strong></p><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>（类似局部作用域）<br>1）用 {} 包裹一块<br>2）let声明变量具有块级作用域，var声明变量不具有块级作用域</p><h3 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h3><p>指的是call,aply等修改this指向<br>​</p><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><h3 id="执行上下文的定义"><a href="#执行上下文的定义" class="headerlink" title="执行上下文的定义"></a>执行上下文的定义</h3><p>执行上下文就是当前 JavaScript 代码被解析和执行时所在的环境， JavaScript 中运行任何的代码都是在执行上下文中运行。<br>执行上下文 为我们的可执行代码块提供了执行前的必要准备工作，例如变量对象的定义、作用域链的扩展、提供调用者的对象引用等信息。</p><h3 id="执行上下文总共有三种类型"><a href="#执行上下文总共有三种类型" class="headerlink" title="执行上下文总共有三种类型"></a>执行上下文总共有三种类型</h3><h4 id="全局执行上下文"><a href="#全局执行上下文" class="headerlink" title="全局执行上下文"></a>全局执行上下文</h4><p>这是最基础也是默认的执行上下文，不在任何函数中的代码都位于全局执行上下文中。它主要做两件事，第一：创建一个window对象；第二，将this的值指向window。注：一个程序中只能有一个全局执行上下文</p><h4 id="函数执行上下文"><a href="#函数执行上下文" class="headerlink" title="函数执行上下文"></a>函数执行上下文</h4><p>当一个函数执行的时候就会为其创建一个执行上下文，函数执行上下文可以有多个，但是只有当函数执行或者说被调用的时候，才会形成函数执行上下文<br>​</p><h4 id="Eval-函数执行上下文"><a href="#Eval-函数执行上下文" class="headerlink" title="Eval 函数执行上下文"></a>Eval 函数执行上下文</h4><p> 运行在 eval 函数中的代码也获得了自己的执行上下文， 由于eval函数执行代码的速率相比其它的慢一些，且容易受到代码攻击，Javascript 开发人员不常用 eval函数，所以在这里不再讨论。<br>​</p><h4 id="作用域和执行上下文两者的区别"><a href="#作用域和执行上下文两者的区别" class="headerlink" title="作用域和执行上下文两者的区别"></a>作用域和执行上下文两者的区别</h4><p>作用域和执行上下文是两个不同的的概念 JavaScript 属于解释型语言，JavaScript 的执行分为：<strong>解释和执行</strong>两个阶段,这两个阶段所做的事并不一样：<br><strong>解释阶段</strong>：词法分析，语法分析，作用域规则确定。<br><strong>执行阶段</strong>：创建执行上下文，执行函数代码，垃圾回收。<br>他们最大的区别是：作用域在解释阶段确定的，并且不会改变；执行上下文在运行阶段确定的，随时可能改变<br>​</p><h2 id="什么叫做执行上下文栈？"><a href="#什么叫做执行上下文栈？" class="headerlink" title="什么叫做执行上下文栈？"></a>什么叫做执行上下文栈？</h2><p>执行上下文栈，也叫执行栈，有的也叫做调用栈。它是一种先进后出的数据结构。用于存储当前执行阶段创建的所有执行上下文。<br>当js引擎执行我们js代码的时候，首先会形成一个全局执行上下文，并将其压入到执行栈中，当执行到一个个函数的时候，就会形成一个个函数上下文，并将这一个个函数上下文压入到执行栈。就像弹夹一样，将一颗颗子弹压入弹夹，最后一颗压入弹夹的子弹会最先射出。需要注意的是，处于活跃的执行上下文环境只能同时有一个，就像子弹一次只能打一发。<br>js引擎会执行位于执行栈栈顶的执行上下文，当该上下文执行结束后，将会被弹出，程序将引导流程处理下一个执行上下文。以此类推，当最后一个执行栈执行完毕，也就是全局执行上下文执行完，就会被退出执行栈销毁，程序结束<br>所有的JS代码执行都像上面这样吗？当代码执行完毕，执行上下文也都销毁。<br>答案是否定的，有种特殊情况，代码执行完，执行上下文环境却不能完全的销毁，这就是闭包。</p><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>作用域有两种工作模式：</p><ol><li>词法作用域</li><li>动态作用域</li></ol><p><strong>​</strong></p><p>大部分编程语言来说，在执行代码之前要经过三个阶段，这三个阶段叫做“编译”。</p><ol><li>分词/词法分析： 讲程序字符串分解成有意义的代码段：var a = 10 分解为： var, a, =, 10。 这些代码段叫做词法单元。</li><li>解析/语法分析：讲词法单元，分析成为抽象语法树（AST）</li><li>代码生成： 讲AST转换为可执行代码。</li></ol><p><strong>在js中作用域是词法作用域</strong><br>所以词法作用域就是定义在词法分析阶段的作用域。通俗的讲：就是在代码写下得的时候，运行之前。这个变量属于哪个作用域就已经确定了。<br>​</p><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><ol><li>在使用var声明变量时，变量会被自动添加到最接近的上下文；在函数中，最接近的上下文就是函数的局部上下文,</li><li>let的作用域是块级的,块级作用域由最近的一对包含花括号{}界定；换句话说，if块，while块、function块，甚至连单独的块也是let声明变量的作用域</li><li>let在同一作用域内不能声明两次</li><li>let适合用于for循环遍历，使用var声明的迭代变量会泄露到循环外部</li><li>let变量不能在声明之前使用</li><li>常量声明，推荐使用const</li><li>当前作用域没有定义的变量就叫做<strong>自由变量</strong></li></ol><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>（变量预解析：js内部在执行js之前会把js解释一遍 然后再执行  ）<br>在一段JS脚本（即一个<script>标签中，或一个function中）执行前，要先解析代码（所以说JS是解释执行的脚本语言），解析的时候会先创建一个全局执行上下文。先把代码中即将执行的函数声明都拿出来，再把变量声明拿出来。函数声明优先级高于变量声明。“移动”到各自作用域的 最顶端，这个过程被称为提升。<br>​</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>当我们想要访问某一个变量或者函数时，它会去当前作用于中去查找，如果当前作用域中没有，它就会去它父级作用域中查找，在没有就再向上找，如果一直没有找到就报错，当抵达最外层的全局作用域时，无论找到还是没找到，查找的过程都会停止。我们把这种通过作用域采取链式查找的方式称为作用域链。<br>​</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>其实闭包的本质就是作用域链的一个特殊的应用，只要了解了作用域链的创建过程，就能够理解闭包的实现原理。<br>​</p><p><strong>闭包是指有权访问另一个函数作用域内变量的函数</strong>，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以 访问到当前函数的局部变量。<br>​</p><p>闭包有两个常用的用途。</p><ul><li>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，我们可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</li><li>函数的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function a()&#123;</span><br><span class="line">    var n = 0;</span><br><span class="line">    function add()&#123;</span><br><span class="line">       n++;</span><br><span class="line">       console.log(n);</span><br><span class="line">    &#125;</span><br><span class="line">    return add;</span><br><span class="line">&#125;</span><br><span class="line">var a1 = a(); //注意，函数名只是一个标识（指向函数的指针），而（）才是执行函数；</span><br><span class="line">a1();    //1</span><br><span class="line">a1();    //2  第二次调用n变量还在内存中</span><br></pre></td></tr></table></figure></li></ul><p>​</p><p>​</p><p>​</p><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><h3 id="1-题目1"><a href="#1-题目1" class="headerlink" title="1. 题目1"></a>1. 题目1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; function foo() &#123; &#125; foo = 1; &#125; console.log(foo); </span><br></pre></td></tr></table></figure><p>最终的打印结果是：ƒ foo() { }<br>​</p><h4 id="1-1-题目1-解题思路"><a href="#1-1-题目1-解题思路" class="headerlink" title="1.1 题目1 解题思路"></a>1.1 题目1 解题思路</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    console.log(window.foo, foo) // undefined        ƒ foo() &#123; &#125;</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    console.log(window.foo, foo) // ƒ foo() &#123; &#125;      ƒ foo() &#123; &#125;</span><br><span class="line">    foo = 1;</span><br><span class="line">    console.log(window.foo, foo) // ƒ foo() &#123; &#125;      1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第一行，打印 undefined ƒ foo() { } 说明此时，函数声明提升到了块级作用域顶部，但没有挂载到全局</li><li>第二行，function foo() { } 实际执行时，会有一个隐式操作，将当前 foo 的值，同步给 window<ul><li>通过 第一行打印结果可以得出，此时 foo 为 ƒ foo() { }</li></ul></li><li>第三行，打印 ƒ foo() { } ƒ foo() { } 说明此时，函数已经被挂载到全局，且在第二行执行了上述的隐式操作</li><li>第四行，foo = 1，此时修改的是 块内的 foo，与外部 window 无关</li><li>第五行，打印 ƒ foo() { } 1 印证上一行言论</li><li>最后一行，打印 ƒ foo() { }</li></ul><h3 id="2-题目2"><a href="#2-题目2" class="headerlink" title="2. 题目2"></a>2. 题目2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    foo = 1;</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo);</span><br></pre></td></tr></table></figure><p>最终的打印结果是：1</p><h4 id="2-1-题目2-解题思路"><a href="#2-1-题目2-解题思路" class="headerlink" title="2.1 题目2 解题思路"></a>2.1 题目2 解题思路</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    console.log(window.foo, foo)    // undefined        ƒ foo() &#123; &#125;</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    console.log(window.foo, foo)    // ƒ foo() &#123; &#125;      ƒ foo() &#123; &#125;</span><br><span class="line">    foo = 1;</span><br><span class="line">    console.log(window.foo, foo)    // ƒ foo() &#123; &#125;      1</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    console.log(window.foo, foo)    // 1 1</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo);   // 1</span><br></pre></td></tr></table></figure><ul><li><p>第一行，打印 undefined ƒ foo() { } 说明此时，函数声明提升到了块级作用域顶部，但没有挂载到全局</p></li><li><p>第二行，function foo() { } 实际执行时，会有一个隐式操作，将当前 foo 的值，同步给 window</p><ul><li>通过第一行打印结果可以得出，此时 foo 为 ƒ foo() { }</li></ul></li><li><p>第三行，打印 ƒ foo() { } ƒ foo() { } 说明此时，函数已经被挂载到全局，且在 第二行执行了上述的隐式操作</p></li><li><p>第四行，foo = 1，此时修改的是，块内的 foo，与外部 window 无关</p></li><li><p>第五行，打印 ƒ foo() { } 1 印证上一行言论</p></li><li><p>第六行，function foo() { } 实际执行时，会有一个·隐式操作·，将当前 foo 的值，同步给 window</p><ul><li>通过第五行打印结果可以得出，此时 foo 为 1</li></ul></li><li><p>第七行，打印 1 1</p></li><li><p>最后一行，打印 1</p><h3 id="3-题目"><a href="#3-题目" class="headerlink" title="3. 题目"></a>3. 题目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    foo = 1;</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    foo = 2;</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo);</span><br></pre></td></tr></table></figure><h4 id="3-1-题目3-解题思路"><a href="#3-1-题目3-解题思路" class="headerlink" title="3.1 题目3 解题思路"></a>3.1 题目3 解题思路</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    console.log(window.foo, foo)    // undefined        ƒ foo() &#123; &#125;</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    console.log(window.foo, foo)    // ƒ foo() &#123; &#125;      ƒ foo() &#123; &#125;</span><br><span class="line">    foo = 1;</span><br><span class="line">    console.log(window.foo, foo)    // ƒ foo() &#123; &#125;      1</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    console.log(window.foo, foo)    // 1 1</span><br><span class="line">    foo = 2;</span><br><span class="line">    console.log(window.foo, foo)    // 1 2</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo);   // 1</span><br></pre></td></tr></table></figure></li><li><p>第一行，打印 undefined ƒ foo() { } 说明此时，函数声明提升到了块级作用域顶部，但没有挂载到全局</p></li><li><p>第二行，function foo() { } 实际执行时，会有一个隐式操作，将当前 foo 的值，同步给 window</p><ul><li>通过第一行打印结果可以得出，此时 foo 为 ƒ foo() { }</li></ul></li><li><p>第三行，打印 ƒ foo() { } ƒ foo() { } 说明此时，函数已经被挂载到全局，且在 第二行执行了上述的隐式操作</p></li><li><p>第四行，foo = 1，此时修改的是，块内的 foo，与外部 window 无关</p></li><li><p>第五行，打印 ƒ foo() { } 1 印证上一行言论</p></li><li><p>第六行，function foo() { } 实际执行时，会有一个·隐式操作·，将当前 foo 的值，同步给 window</p><ul><li>通过第五行行打印结果可以得出，此时 foo 为 1</li></ul></li><li><p>第七行，打印 1 1</p></li><li><p>第八行，foo = 2，此时修改的是，块内的 foo，与外部 window 无关</p></li><li><p>第九行，打印 1 2</p></li><li><p>最后一行，打印 1</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>这里要考验我们的点其实就是 块级作用域中，函数被提升后在执行到声明哪一行时不是什么也没有做，而是在执行完声明后的哪一行代码时，会将当前自身的值同步给外部 window</li><li>这也是最重要的，遇到问题多思考，对于一些看不明白的东西，一定要用 console</li></ol><p>​</p><p>​</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>​</p><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><p>​</p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是作用域？&quot;&gt;&lt;a href=&quot;#什么是作用域？&quot; class=&quot;headerlink&quot; title=&quot;什么是作用域？&quot;&gt;&lt;/a&gt;什么是作用域？&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;br&gt;变量可访问某一变量的区域（范围）&lt;/p&gt;
&lt;p&gt;&lt;s</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端知识脑图</title>
    <link href="http://example.com/2021/10/08/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%84%91%E5%9B%BE/"/>
    <id>http://example.com/2021/10/08/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%84%91%E5%9B%BE/</id>
    <published>2021-10-07T16:00:00.000Z</published>
    <updated>2021-11-03T07:57:54.916Z</updated>
    
    <content type="html"><![CDATA[<p>大部分程序员到职业生涯结束，很多计算机知识都没办法完成，解决焦虑的办法，就是提高接受知识的加速度，提高加速度的方法就是构建知识体系。系统性的训练，这个时候学习一个新的知识很容易找到该有的位置，学的会很快。一定要想办法输出出去，告诉别人，可以产生一些争论，争论是成长最快的时刻，争论还需要找时间去证明。写的时候也会发现自己体系缺少什么。</p><p><img src="https://raw.githubusercontent.com/yingxiaobei/gitData/master/image/KnowledgeMind.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大部分程序员到职业生涯结束，很多计算机知识都没办法完成，解决焦虑的办法，就是提高接受知识的加速度，提高加速度的方法就是构建知识体系。系统性的训练，这个时候学习一个新的知识很容易找到该有的位置，学的会很快。一定要想办法输出出去，告诉别人，可以产生一些争论，争论是成长最快的时刻</summary>
      
    
    
    
    <category term="概览" scheme="http://example.com/categories/%E6%A6%82%E8%A7%88/"/>
    
    
    <category term="概览" scheme="http://example.com/tags/%E6%A6%82%E8%A7%88/"/>
    
  </entry>
  
</feed>
