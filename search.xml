<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>this</title>
      <link href="/2021/10/25/JavaScript/this/"/>
      <url>/2021/10/25/JavaScript/this/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是this"><a href="#什么是this" class="headerlink" title="什么是this"></a>什么是this</h2><p>this 是JavaScript中的一个关键词，在JavaScript中，this不是固定不变的，在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。<br><strong>this是一个指针，指向调用函数的那个对象。</strong><br><strong>​</strong></p><h2 id="为什么要用this"><a href="#为什么要用this" class="headerlink" title="为什么要用this"></a>为什么要用this</h2><p>回答这个问题我们就先看看如果不使用this会出现什么问题。试想下面代码如果不使用this应该怎么写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function speak()&#123;</span><br><span class="line">    var name = this.name</span><br><span class="line">    console.log(`Hello I am $&#123;name&#125;`)</span><br><span class="line">&#125;</span><br><span class="line">var me = &#123;</span><br><span class="line">    name: &#x27;a&#x27;,</span><br><span class="line">    speak: speak</span><br><span class="line">&#125;</span><br><span class="line">var you = &#123;</span><br><span class="line">    name: &#x27;b&#x27;,</span><br><span class="line">    speak: speak</span><br><span class="line">&#125;</span><br><span class="line">me.speak()  //Hello I am a</span><br><span class="line">you.speak()  //Hello I am b</span><br></pre></td></tr></table></figure><p>this可以在同一个执行环境中使用不同的上下文对象。它其实提供了一种更加优雅的方式来隐式“传递”一个对象引用，因此可以使API设计的更加简洁且易于复用。<br>this使用频率很高，如果我们不懂this，那么在看别人的代码或者是源码的时候，就会很吃力。<br><strong>一定程度上减少代码量，提高代码整洁性和可读性</strong></p><h2 id="绑定规则"><a href="#绑定规则" class="headerlink" title="绑定规则"></a>绑定规则</h2><ul><li>在浏览器里，在全局范围内this 指向window对象；</li><li>在函数中，this永远指向最后调用他的那个对象；</li><li>构造函数中，this指向new出来的那个新的对象；</li><li>call、apply、bind中的this被强绑定在指定的那个对象上；</li><li>箭头函数中this比较特殊,箭头函数this为父作用域的this，不是调用时的this.要知道前四种方式,都是调用时确定,也就是动态的,而箭头函数的this指向是静态的,声明的时候就确定了下来；</li><li>apply、call、bind都是js给函数内置的一些API，调用他们可以为函数指定this的执行,同时也可以传参。</li></ul><p>​</p><h2 id="绑定类型"><a href="#绑定类型" class="headerlink" title="绑定类型"></a>绑定类型</h2><p><a href="https://juejin.cn/post/6844903805587619854#heading-11">https://juejin.cn/post/6844903805587619854#heading-11</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域及作用域链</title>
      <link href="/2021/10/25/JavaScript/%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%8A%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
      <url>/2021/10/25/JavaScript/%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%8A%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是作用域？"><a href="#什么是作用域？" class="headerlink" title="什么是作用域？"></a>什么是作用域？</h2><p><strong>定义：</strong><br>变量可访问某一变量的区域（范围）</p><p><strong>作用：</strong><br>隔离变量，不会造成变量污染问题，在不同的作用域下，相同的变量命名不会冲突</p><p>​</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>1）在全局作用域声明的变量是全局变量，全局变量可以在任何地方使用<br>2）因为全局变量可以任何地方使用，所以要特别关注局部变量<br>3）全局作用域在页面打开时创建，在页面关闭时销毁<br><strong>​</strong></p><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>（也叫函数作用域）<br>1）函数在执行的时候会在内存中开辟新空间<br>2）当执行完毕函数之后，会关闭作用域空间(变量被销毁)<br>注意：形参也是局部变量<br><strong>​</strong></p><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>（类似局部作用域）<br>1）用 {} 包裹一块<br>2）let声明变量具有块级作用域，var声明变量不具有块级作用域</p><h3 id="动态作用域"><a href="#动态作用域" class="headerlink" title="动态作用域"></a>动态作用域</h3><p>指的是call,aply等修改this指向<br>​</p><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><h3 id="执行上下文的定义"><a href="#执行上下文的定义" class="headerlink" title="执行上下文的定义"></a>执行上下文的定义</h3><p>执行上下文就是当前 JavaScript 代码被解析和执行时所在的环境， JavaScript 中运行任何的代码都是在执行上下文中运行。<br>执行上下文 为我们的可执行代码块提供了执行前的必要准备工作，例如变量对象的定义、作用域链的扩展、提供调用者的对象引用等信息。</p><h3 id="执行上下文总共有三种类型"><a href="#执行上下文总共有三种类型" class="headerlink" title="执行上下文总共有三种类型"></a>执行上下文总共有三种类型</h3><h4 id="全局执行上下文"><a href="#全局执行上下文" class="headerlink" title="全局执行上下文"></a>全局执行上下文</h4><p>这是最基础也是默认的执行上下文，不在任何函数中的代码都位于全局执行上下文中。它主要做两件事，第一：创建一个window对象；第二，将this的值指向window。注：一个程序中只能有一个全局执行上下文</p><h4 id="函数执行上下文"><a href="#函数执行上下文" class="headerlink" title="函数执行上下文"></a>函数执行上下文</h4><p>当一个函数执行的时候就会为其创建一个执行上下文，函数执行上下文可以有多个，但是只有当函数执行或者说被调用的时候，才会形成函数执行上下文<br>​</p><h4 id="Eval-函数执行上下文"><a href="#Eval-函数执行上下文" class="headerlink" title="Eval 函数执行上下文"></a>Eval 函数执行上下文</h4><p> 运行在 eval 函数中的代码也获得了自己的执行上下文， 由于eval函数执行代码的速率相比其它的慢一些，且容易受到代码攻击，Javascript 开发人员不常用 eval函数，所以在这里不再讨论。<br>​</p><h4 id="作用域和执行上下文两者的区别"><a href="#作用域和执行上下文两者的区别" class="headerlink" title="作用域和执行上下文两者的区别"></a>作用域和执行上下文两者的区别</h4><p>作用域和执行上下文是两个不同的的概念 JavaScript 属于解释型语言，JavaScript 的执行分为：<strong>解释和执行</strong>两个阶段,这两个阶段所做的事并不一样：<br><strong>解释阶段</strong>：词法分析，语法分析，作用域规则确定。<br><strong>执行阶段</strong>：创建执行上下文，执行函数代码，垃圾回收。<br>他们最大的区别是：作用域在解释阶段确定的，并且不会改变；执行上下文在运行阶段确定的，随时可能改变<br>​</p><h2 id="什么叫做执行上下文栈？"><a href="#什么叫做执行上下文栈？" class="headerlink" title="什么叫做执行上下文栈？"></a>什么叫做执行上下文栈？</h2><p>执行上下文栈，也叫执行栈，有的也叫做调用栈。它是一种先进后出的数据结构。用于存储当前执行阶段创建的所有执行上下文。<br>当js引擎执行我们js代码的时候，首先会形成一个全局执行上下文，并将其压入到执行栈中，当执行到一个个函数的时候，就会形成一个个函数上下文，并将这一个个函数上下文压入到执行栈。就像弹夹一样，将一颗颗子弹压入弹夹，最后一颗压入弹夹的子弹会最先射出。需要注意的是，处于活跃的执行上下文环境只能同时有一个，就像子弹一次只能打一发。<br>js引擎会执行位于执行栈栈顶的执行上下文，当该上下文执行结束后，将会被弹出，程序将引导流程处理下一个执行上下文。以此类推，当最后一个执行栈执行完毕，也就是全局执行上下文执行完，就会被退出执行栈销毁，程序结束<br>所有的JS代码执行都像上面这样吗？当代码执行完毕，执行上下文也都销毁。<br>答案是否定的，有种特殊情况，代码执行完，执行上下文环境却不能完全的销毁，这就是闭包。</p><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>作用域有两种工作模式：</p><ol><li>词法作用域</li><li>动态作用域</li></ol><p><strong>​</strong></p><p>大部分编程语言来说，在执行代码之前要经过三个阶段，这三个阶段叫做“编译”。</p><ol><li>分词/词法分析： 讲程序字符串分解成有意义的代码段：var a = 10 分解为： var, a, =, 10。 这些代码段叫做词法单元。</li><li>解析/语法分析：讲词法单元，分析成为抽象语法树（AST）</li><li>代码生成： 讲AST转换为可执行代码。</li></ol><p><strong>在js中作用域是词法作用域</strong><br>所以词法作用域就是定义在词法分析阶段的作用域。通俗的讲：就是在代码写下得的时候，运行之前。这个变量属于哪个作用域就已经确定了。<br>​</p><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><ol><li>在使用var声明变量时，变量会被自动添加到最接近的上下文；在函数中，最接近的上下文就是函数的局部上下文,</li><li>let的作用域是块级的,块级作用域由最近的一对包含花括号{}界定；换句话说，if块，while块、function块，甚至连单独的块也是let声明变量的作用域</li><li>let在同一作用域内不能声明两次</li><li>let适合用于for循环遍历，使用var声明的迭代变量会泄露到循环外部</li><li>let变量不能在声明之前使用</li><li>常量声明，推荐使用const</li><li>当前作用域没有定义的变量就叫做<strong>自由变量</strong></li></ol><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>（变量预解析：js内部在执行js之前会把js解释一遍 然后再执行  ）<br>在一段JS脚本（即一个<script>标签中，或一个function中）执行前，要先解析代码（所以说JS是解释执行的脚本语言），解析的时候会先创建一个全局执行上下文。先把代码中即将执行的函数声明都拿出来，再把变量声明拿出来。函数声明优先级高于变量声明。“移动”到各自作用域的 最顶端，这个过程被称为提升。<br>​</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>当我们想要访问某一个变量或者函数时，它会去当前作用于中去查找，如果当前作用域中没有，它就会去它父级作用域中查找，在没有就再向上找，如果一直没有找到就报错，当抵达最外层的全局作用域时，无论找到还是没找到，查找的过程都会停止。我们把这种通过作用域采取链式查找的方式称为作用域链。<br>​</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>其实闭包的本质就是作用域链的一个特殊的应用，只要了解了作用域链的创建过程，就能够理解闭包的实现原理。<br>​</p><p><strong>闭包是指有权访问另一个函数作用域内变量的函数</strong>，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以 访问到当前函数的局部变量。<br>​</p><p>闭包有两个常用的用途。</p><ul><li>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，我们可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</li><li>函数的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function a()&#123;</span><br><span class="line">    var n = 0;</span><br><span class="line">    function add()&#123;</span><br><span class="line">       n++;</span><br><span class="line">       console.log(n);</span><br><span class="line">    &#125;</span><br><span class="line">    return add;</span><br><span class="line">&#125;</span><br><span class="line">var a1 = a(); //注意，函数名只是一个标识（指向函数的指针），而（）才是执行函数；</span><br><span class="line">a1();    //1</span><br><span class="line">a1();    //2  第二次调用n变量还在内存中</span><br></pre></td></tr></table></figure></li></ul><p>​</p><p>​</p><p>​</p><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><h3 id="1-题目1"><a href="#1-题目1" class="headerlink" title="1. 题目1"></a>1. 题目1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; function foo() &#123; &#125; foo = 1; &#125; console.log(foo); </span><br></pre></td></tr></table></figure><p>最终的打印结果是：ƒ foo() { }<br>​</p><h4 id="1-1-题目1-解题思路"><a href="#1-1-题目1-解题思路" class="headerlink" title="1.1 题目1 解题思路"></a>1.1 题目1 解题思路</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    console.log(window.foo, foo) // undefined        ƒ foo() &#123; &#125;</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    console.log(window.foo, foo) // ƒ foo() &#123; &#125;      ƒ foo() &#123; &#125;</span><br><span class="line">    foo = 1;</span><br><span class="line">    console.log(window.foo, foo) // ƒ foo() &#123; &#125;      1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第一行，打印 undefined ƒ foo() { } 说明此时，函数声明提升到了块级作用域顶部，但没有挂载到全局</li><li>第二行，function foo() { } 实际执行时，会有一个隐式操作，将当前 foo 的值，同步给 window<ul><li>通过 第一行打印结果可以得出，此时 foo 为 ƒ foo() { }</li></ul></li><li>第三行，打印 ƒ foo() { } ƒ foo() { } 说明此时，函数已经被挂载到全局，且在第二行执行了上述的隐式操作</li><li>第四行，foo = 1，此时修改的是 块内的 foo，与外部 window 无关</li><li>第五行，打印 ƒ foo() { } 1 印证上一行言论</li><li>最后一行，打印 ƒ foo() { }</li></ul><h3 id="2-题目2"><a href="#2-题目2" class="headerlink" title="2. 题目2"></a>2. 题目2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    foo = 1;</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo);</span><br></pre></td></tr></table></figure><p>最终的打印结果是：1</p><h4 id="2-1-题目2-解题思路"><a href="#2-1-题目2-解题思路" class="headerlink" title="2.1 题目2 解题思路"></a>2.1 题目2 解题思路</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    console.log(window.foo, foo)    // undefined        ƒ foo() &#123; &#125;</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    console.log(window.foo, foo)    // ƒ foo() &#123; &#125;      ƒ foo() &#123; &#125;</span><br><span class="line">    foo = 1;</span><br><span class="line">    console.log(window.foo, foo)    // ƒ foo() &#123; &#125;      1</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    console.log(window.foo, foo)    // 1 1</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo);   // 1</span><br></pre></td></tr></table></figure><ul><li><p>第一行，打印 undefined ƒ foo() { } 说明此时，函数声明提升到了块级作用域顶部，但没有挂载到全局</p></li><li><p>第二行，function foo() { } 实际执行时，会有一个隐式操作，将当前 foo 的值，同步给 window</p><ul><li>通过第一行打印结果可以得出，此时 foo 为 ƒ foo() { }</li></ul></li><li><p>第三行，打印 ƒ foo() { } ƒ foo() { } 说明此时，函数已经被挂载到全局，且在 第二行执行了上述的隐式操作</p></li><li><p>第四行，foo = 1，此时修改的是，块内的 foo，与外部 window 无关</p></li><li><p>第五行，打印 ƒ foo() { } 1 印证上一行言论</p></li><li><p>第六行，function foo() { } 实际执行时，会有一个·隐式操作·，将当前 foo 的值，同步给 window</p><ul><li>通过第五行打印结果可以得出，此时 foo 为 1</li></ul></li><li><p>第七行，打印 1 1</p></li><li><p>最后一行，打印 1</p><h3 id="3-题目"><a href="#3-题目" class="headerlink" title="3. 题目"></a>3. 题目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    foo = 1;</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    foo = 2;</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo);</span><br></pre></td></tr></table></figure><h4 id="3-1-题目3-解题思路"><a href="#3-1-题目3-解题思路" class="headerlink" title="3.1 题目3 解题思路"></a>3.1 题目3 解题思路</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    console.log(window.foo, foo)    // undefined        ƒ foo() &#123; &#125;</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    console.log(window.foo, foo)    // ƒ foo() &#123; &#125;      ƒ foo() &#123; &#125;</span><br><span class="line">    foo = 1;</span><br><span class="line">    console.log(window.foo, foo)    // ƒ foo() &#123; &#125;      1</span><br><span class="line">    function foo() &#123; &#125;</span><br><span class="line">    console.log(window.foo, foo)    // 1 1</span><br><span class="line">    foo = 2;</span><br><span class="line">    console.log(window.foo, foo)    // 1 2</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo);   // 1</span><br></pre></td></tr></table></figure></li><li><p>第一行，打印 undefined ƒ foo() { } 说明此时，函数声明提升到了块级作用域顶部，但没有挂载到全局</p></li><li><p>第二行，function foo() { } 实际执行时，会有一个隐式操作，将当前 foo 的值，同步给 window</p><ul><li>通过第一行打印结果可以得出，此时 foo 为 ƒ foo() { }</li></ul></li><li><p>第三行，打印 ƒ foo() { } ƒ foo() { } 说明此时，函数已经被挂载到全局，且在 第二行执行了上述的隐式操作</p></li><li><p>第四行，foo = 1，此时修改的是，块内的 foo，与外部 window 无关</p></li><li><p>第五行，打印 ƒ foo() { } 1 印证上一行言论</p></li><li><p>第六行，function foo() { } 实际执行时，会有一个·隐式操作·，将当前 foo 的值，同步给 window</p><ul><li>通过第五行行打印结果可以得出，此时 foo 为 1</li></ul></li><li><p>第七行，打印 1 1</p></li><li><p>第八行，foo = 2，此时修改的是，块内的 foo，与外部 window 无关</p></li><li><p>第九行，打印 1 2</p></li><li><p>最后一行，打印 1</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>这里要考验我们的点其实就是 块级作用域中，函数被提升后在执行到声明哪一行时不是什么也没有做，而是在执行完声明后的哪一行代码时，会将当前自身的值同步给外部 window</li><li>这也是最重要的，遇到问题多思考，对于一些看不明白的东西，一定要用 console</li></ol><p>​</p><p>​</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>​</p><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><p>​</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
